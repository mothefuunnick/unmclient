/*

	Copyright 2010 Trevor Hogan

	Licensed under the Apache License, Version 2.0 (the "License");
	you may not use this file except in compliance with the License.
	You may obtain a copy of the License at

		http://www.apache.org/licenses/LICENSE-2.0

	Unless required by applicable law or agreed to in writing, software
	distributed under the License is distributed on an "AS IS" BASIS,
	WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	See the License for the specific language governing permissions and
	limitations under the License.

*/

#ifndef LANGUAGE_H
#define LANGUAGE_H

//
// CLanguage
//

class CLanguage
{
private:
	CConfig *m_CFG;

public:
    CLanguage( std::string nCFGFile );
	~CLanguage( );
    void Replace( std::string &Text, std::string Key, std::string Value );
    std::string UnableToCreateGameTryAnotherName( std::string server, std::string gamename );
    std::string UserIsAlreadyAnAdmin( std::string server, std::string user );
    std::string AddedUserToAdminDatabase( std::string server, std::string user );
    std::string ErrorAddingUserToAdminDatabase( std::string server, std::string user );
    std::string YouDontHaveAccessToThatCommand( );
    std::string UserIsAlreadyBanned( std::string server, std::string victim );
    std::string BannedUser( std::string server, std::string victim );
    std::string ErrorBanningUser( std::string server, std::string victim );
    std::string UserIsAnAdmin( std::string server, std::string user );
    std::string UserIsNotAnAdmin( std::string server, std::string user );
    std::string UserWasBannedOnByBecause( std::string server, std::string victim, std::string date, std::string date2, std::string admin, std::string reason, std::string expiredate );
    std::string UserIsNotBanned( std::string server, std::string victim );
    std::string ThereAreNoAdmins( std::string server );
    std::string ThereIsAdmin( std::string server );
    std::string ThereAreAdmins( std::string server, std::string count );
    std::string ThereAreNoBannedUsers( std::string server );
    std::string ThereIsBannedUser( std::string server );
    std::string ThereAreBannedUsers( std::string server, std::string count );
    std::string YouCantDeleteTheRootAdmin( );
    std::string DeletedUserFromAdminDatabase( std::string server, std::string user );
    std::string ErrorDeletingUserFromAdminDatabase( std::string server, std::string user );
    std::string UnbannedUser( std::string victim );
    std::string ErrorUnbanningUser( std::string victim );
    std::string GameNumberIs( std::string number, std::string description );
    std::string GameNumberDoesntExist( std::string number );
    std::string GameIsInTheLobby( std::string description, std::string current, std::string max );
    std::string ThereIsNoGameInTheLobby( std::string current, std::string max );
    std::string UnableToLoadConfigFilesOutside( );
    std::string LoadingConfigFile( std::string file );
    std::string UnableToLoadConfigFileDoesntExist( std::string file );
    std::string CreatingPrivateGame( std::string gamename, std::string user );
    std::string CreatingPublicGame( std::string gamename, std::string user );
    std::string UnableToUnhostGameCountdownStarted( std::string description );
    std::string UnhostingGame( std::string description );
    std::string UnableToUnhostGameNoGameInLobby( );
    std::string AllFrom( std::string players, std::string country );
    std::string AllFrom2( std::string players, std::string country );
    std::string UnableToCreateGameAnotherGameInLobby( std::string gamename, std::string description );
    std::string UnableToCreateGameMaxGamesReached( std::string gamename, std::string max );
    std::string GameIsOver( std::string description );
    std::string SpoofCheckByReplying( );
    std::string GameRefreshed( );
    std::string SpoofPossibleIsAway( std::string user );
    std::string SpoofPossibleIsUnavailable( std::string user );
    std::string SpoofPossibleIsRefusingMessages( std::string user );
    std::string SpoofDetectedIsNotInGame( std::string user );
    std::string SpoofDetectedIsInPrivateChannel( std::string user );
    std::string SpoofDetectedIsInAnotherGame( std::string user );
    std::string CountDownAborted( );
    std::string TryingToJoinTheGameButBanned( std::string victim, std::string admin );
    std::string UnableToBanNoMatchesFound( std::string victim );
    std::string PlayerWasBannedByPlayer( std::string server, std::string victim, std::string user, std::string expiredate );
    std::string UnableToBanFoundMoreThanOneMatch( std::string victim );
    std::string AddedPlayerToTheMuteList( std::string user );
    std::string RemovedPlayerFromTheMuteList( std::string user );
    std::string AddedPlayerToTheHoldList( std::string user );
    std::string UnableToKickNoMatchesFound( std::string victim );
    std::string UnableToKickFoundMoreThanOneMatch( std::string victim );
    std::string SettingLatencyToMinimum( std::string min );
    std::string SettingLatencyToMaximum( std::string max );
    std::string SettingLatencyTo( std::string latency );
    std::string KickingPlayersWithPingsGreaterThan( std::string total, std::string ping );
    std::string HasPlayedGamesWithThisBot( std::string user, std::string firstgame, std::string lastgame, std::string totalgames, std::string hoursplayed, std::string minutesplayed, std::string hoursloaded, std::string minutesloaded, std::string avgloadingtime, std::string avgstay, std::string level );
    std::string HasntPlayedGamesWithThisBot( std::string user );
    std::string AutokickingPlayerForDeniedCountry( std::string victim, std::string country );
    std::string AutokickingPlayerForDeniedProvider( std::string victim, std::string provider );
    std::string AutokickingPlayerForDeniedScore( std::string victim, std::string score, std::string reqscore );
    std::string AutokickingPlayerForExcessivePing( std::string victim, std::string ping );
    std::string SpoofCheckAcceptedFor( std::string server, std::string user );
    std::string PlayersNotYetSpoofChecked( std::string notspoofchecked );
    std::string OnlyOwnersCanStart( );
    std::string SpoofCheckByWhispering( std::string hostname );
    std::string EveryoneHasBeenSpoofChecked( );
    std::string PlayersNotYetPinged( std::string number, std::string notpinged );
    std::string EveryoneHasBeenPinged( );
    std::string ShortestLoadByPlayer( std::string user, std::string loadingtime );
    std::string LongestLoadByPlayer( std::string user, std::string loadingtime );
    std::string YourLoadingTimeWas( std::string loadingtime );
    std::string HasPlayedDotAGamesWithThisBot( std::string user, std::string totalgames, std::string totalwins, std::string totallosses, std::string totalkills, std::string totaldeaths, std::string totalcreepkills, std::string totalcreepdenies, std::string totalassists, std::string totalneutralkills, std::string totaltowerkills, std::string totalraxkills, std::string totalcourierkills, std::string avgkills, std::string avgdeaths, std::string avgcreepkills, std::string avgcreepdenies, std::string avgassists, std::string avgneutralkills, std::string avgtowerkills, std::string avgraxkills, std::string avgcourierkills );
    std::string HasPlayedDotAGamesWithThisBot2( std::string user, std::string totalgames, std::string winspergame, std::string lossespergame, std::string killspergame, std::string deathspergame, std::string creepkillspergame, std::string creepdeniespergame, std::string assistspergame, std::string neutralkillspergame, std::string towerkillspergame, std::string raxkillspergame, std::string courierkillspergame, std::string score, std::string rank );
    std::string HasntPlayedDotAGamesWithThisBot( std::string user );
    std::string WasKickedForReservedPlayer( std::string reserved );
    std::string WasKickedForOwnerPlayer( std::string owner );
    std::string WasKickedByPlayer( std::string user );
    std::string HasLostConnectionPlayerError( std::string error );
    std::string HasLostConnectionSocketError( std::string error );
    std::string HasLostConnectionClosedByRemoteHost( );
    std::string HasLeftVoluntarily( );
    std::string EndingGame( std::string description );
    std::string HasLostConnectionTimedOut( );
    std::string GlobalChatMuted( );
    std::string GlobalChatUnmuted( );
    std::string ShufflingPlayers( );
    std::string UnableToLoadConfigFileGameInLobby( std::string trigger );
    std::string PlayersStillDownloading( std::string stilldownloading );
    std::string RefreshMessagesEnabled( );
    std::string RefreshMessagesDisabled( );
    std::string AtLeastOneGameActiveUseForceToShutdown( std::string trigger );
    std::string CurrentlyLoadedMapCFGIs( std::string mapcfg );
    std::string LaggedOutDroppedByAdmin( );
    std::string LaggedOutDroppedByVote( );
    std::string PlayerVotedToDropLaggers( std::string user );
    std::string LatencyIs( std::string latency );
    std::string SyncLimitIs( std::string synclimit );
    std::string SettingSyncLimitToMinimum( std::string min );
    std::string SettingSyncLimitToMaximum( std::string max );
    std::string SettingSyncLimitTo( std::string synclimit );
    std::string UnableToCreateGameNotLoggedIn( std::string gamename );
    std::string AdminLoggedIn( );
    std::string AdminInvalidPassword( std::string attempt );
    std::string ConnectingToBNET( std::string server );
    std::string ConnectedToBNET( std::string server );
    std::string DisconnectedFromBNET( std::string server );
    std::string LoggedInToBNET( std::string server );
    std::string BNETGameHostingSucceeded( std::string server );
    std::string BNETGameHostingFailed( std::string server, std::string gamename );
    std::string ConnectingToBNETTimedOut( std::string server );
    std::string PlayerDownloadedTheMap( std::string user, std::string seconds, std::string rate );
    std::string UnableToCreateGameNameTooLong( std::string gamename );
    std::string SettingGameOwnerTo( std::string owner );
    std::string TheGameIsLocked( );
    std::string GameLocked( );
    std::string GameUnlocked( );
    std::string UnableToStartDownloadNoMatchesFound( std::string victim );
    std::string UnableToStartDownloadFoundMoreThanOneMatch( std::string victim );
    std::string UnableToSetGameOwner( std::string owner );
    std::string UnableToCheckPlayerNoMatchesFound( std::string victim );
    std::string CheckedPlayer( std::string victim, std::string ping, std::string from, std::string admin, std::string owner, std::string spoofed, std::string realm, std::string reserved );
    std::string UnableToCheckPlayerFoundMoreThanOneMatch( std::string victim );
    std::string TheGameIsLockedBNET( );
    std::string UnableToCreateGameDisabled( std::string gamename, std::string reason );
    std::string BotDisabled( );
    std::string BotEnabled( );
    std::string UnableToCreateGameInvalidMap( std::string gamename );
    std::string WaitingForPlayersBeforeAutoStartVS( std::string players, std::string playersleft, std::string trigger );
    std::string AutoStartDisabled( std::string trigger );
    std::string AutoStartEnabled( std::string players );
    std::string AnnounceMessageEnabled( );
    std::string AnnounceMessageDisabled( );
    std::string AutoHostEnabled( );
    std::string AutoHostDisabled( );
    std::string UnableToLoadSaveGamesOutside( );
    std::string UnableToLoadSaveGameGameInLobby( );
    std::string LoadingSaveGame( std::string file );
    std::string UnableToLoadSaveGameDoesntExist( std::string file );
    std::string UnableToCreateGameInvalidSaveGame( std::string gamename );
    std::string UnableToCreateGameSaveGameMapMismatch( std::string gamename );
    std::string AutoSaveEnabled( );
    std::string AutoSaveDisabled( );
    std::string DesyncDetected( );
    std::string UnableToMuteNoMatchesFound( std::string victim );
    std::string MutedPlayer( std::string victim, std::string user );
    std::string UnmutedPlayer( std::string victim, std::string user );
    std::string UnableToMuteFoundMoreThanOneMatch( std::string victim );
    std::string PlayerIsSavingTheGame( std::string player );
    std::string UpdatingClanList( );
    std::string UpdatingFriendsList( );
    std::string MultipleIPAddressUsageDetected( std::string player, std::string others );
    std::string UnableToVoteKickAlreadyInProgress( );
    std::string UnableToVoteKickNotEnoughPlayers( );
    std::string UnableToVoteKickNoMatchesFound( std::string victim );
    std::string UnableToVoteKickPlayerIsReserved( std::string victim );
    std::string StartedVoteKick( std::string victim, std::string user, std::string votesneeded );
    std::string UnableToVoteKickFoundMoreThanOneMatch( std::string victim );
    std::string VoteKickPassed( std::string victim );
    std::string ErrorVoteKickingPlayer( std::string victim );
    std::string VoteKickAcceptedNeedMoreVotes( std::string victim, std::string user, std::string votes );
    std::string VoteKickCancelled( std::string victim );
    std::string VoteKickExpired( std::string victim );
    std::string WasKickedByVote( );
    std::string TypeYesToVote( std::string commandtrigger );
    std::string PlayersNotYetPingedAutoStart( std::string notpinged );
    std::string WasKickedForNotSpoofChecking( );
    std::string WasKickedForHavingFurthestScore( std::string score, std::string average );
    std::string PlayerHasScore( std::string player, std::string score );
    std::string RatedPlayersSpread( std::string rated, std::string total, std::string spread );
    std::string ErrorListingMaps( );
    std::string FoundMaps( std::string maps );
    std::string NoMapsFound( );
    std::string ErrorListingMapConfigs( );
    std::string FoundMapConfigs( std::string mapconfigs );
    std::string NoMapConfigsFound( );
    std::string PlayerFinishedLoading( std::string user );
    std::string PleaseWaitPlayersStillLoading( );
    std::string MapDownloadsDisabled( );
    std::string MapDownloadsEnabled( );
    std::string MapDownloadsConditional( );
    std::string SettingHCL( std::string HCL );
    std::string UnableToSetHCLInvalid( );
    std::string UnableToSetHCLTooLong( );
    std::string TheHCLIs( std::string HCL );
    std::string TheHCLIsTooLongUseForceToStart( std::string trigger );
    std::string ClearingHCL( );
    std::string TryingToRehostAsPrivateGame( std::string gamename );
    std::string TryingToRehostAsPublicGame( std::string gamename );
    std::string RehostWasSuccessful( );
    std::string TryingToJoinTheGameButBannedByName( std::string victim );
    std::string TryingToJoinTheGameButBannedByIP( std::string victim, std::string ip, std::string bannedname );
    std::string HasBannedName( std::string victim );
    std::string HasBannedIP( std::string victim, std::string ip, std::string bannedname );
    std::string PlayersInGameState( std::string number, std::string players );
    std::string ValidServers( std::string servers );
    std::string TeamCombinedScore( std::string team, std::string score );
    std::string BalancingSlotsCompleted( );
    std::string PlayerWasKickedForFurthestScore( std::string name, std::string score, std::string average );
    std::string LocalAdminMessagesEnabled( );
    std::string LocalAdminMessagesDisabled( );
    std::string WasDroppedDesync( );
    std::string WasKickedForHavingLowestScore( std::string score );
    std::string PlayerWasKickedForLowestScore( std::string name, std::string score );
    std::string ReloadingConfigurationFiles( );
    std::string CountDownAbortedSomeoneLeftRecently( );
    std::string UnableToCreateGameMustEnforceFirst( std::string gamename );
    std::string UnableToLoadReplaysOutside( );
    std::string LoadingReplay( std::string file );
    std::string UnableToLoadReplayDoesntExist( std::string file );
    std::string CommandTrigger( std::string trigger );
    std::string CantEndGameOwnerIsStillPlaying( std::string owner );
    std::string CantUnhostGameOwnerIsPresent( std::string owner );
    std::string WasAutomaticallyDroppedAfterSeconds( std::string seconds );
    std::string HasLostConnectionTimedOutGProxy( );
    std::string HasLostConnectionSocketErrorGProxy( std::string error );
    std::string HasLostConnectionClosedByRemoteHostGProxy( );
    std::string WaitForReconnectSecondsRemain( std::string seconds );
    std::string WasUnrecoverablyDroppedFromGProxy( );
    std::string PlayerReconnectedWithGProxy( std::string name );
    std::string HasLeftTheGame( );
    std::string PlayerIsInTheSafeList( std::string user, std::string voucher );
    std::string PlayerIsNotInTheSafeList( std::string user );
    std::string AddedPlayerToTheSafeList( std::string user );
    std::string RemovedPlayerFromTheSafeList( std::string user );
    std::string PlayerMutedForBeingFoulMouthed( std::string user, std::string time );
    std::string DisplayWarnsCount( std::string WarnCount );
    std::string WarnedUser( std::string Server, std::string Victim, std::string WarnCount );
    std::string ErrorWarningUser( std::string server, std::string victim );
    std::string UnableToWarnNoMatchesFound( std::string victim );
    std::string PlayerWasWarnedByPlayer( std::string victim, std::string user, std::string warnnum );
    std::string UnableToWarnFoundMoreThanOneMatch( std::string victim );
    std::string UnwarnedUser( std::string victim );
    std::string ErrorUnwarningUser( std::string victim );
    std::string UserReachedWarnQuota( std::string victim, std::string bantime );
    std::string IncorrectCommandSyntax( );
    std::string TempBannedUser( std::string server, std::string victim, std::string bantime );
    std::string UserIsNotWarned( std::string victim );
    std::string UserWarnReasons( std::string victim, std::string warnnum );
    std::string UserBanWarnReasons( std::string victim );
    std::string CannotAutoWarn( );
    std::string AutoWarnEnabled( );
    std::string AutoWarnDisabled( );
    std::string SafeJoinedTheChannel( std::string user );
    std::string AdminJoinedTheChannel( std::string user );
    std::string RootAdminJoinedTheChannel( std::string user );
    std::string ChieftainJoinedTheChannel( std::string user );
    std::string ShamanJoinedTheChannel( std::string user );
    std::string PlayerIsNoted( std::string user, std::string voucher );
    std::string PlayerIsNotNoted( std::string user );
    std::string AddedPlayerToNoteList( std::string user );
    std::string ChangedPlayerNote( std::string user );
    std::string RemovedPlayerFromNoteList( std::string user );
    std::string PlayerNeedsToReady( std::string user, std::string trigger );
    std::string EverybodyIsReady( std::string user, std::string trigger );
    std::string PlayerIsReady( std::string user, std::string trigger );
    std::string EverybodyIsReadyToStartGame( );
    std::string WimAdvise( std::string trigger );
    std::string ReadyState( std::string vote, std::string player, std::string voteneed );
    std::string RdyState( std::string vote, std::string trigger );
    std::string BothTeamsMustHaveAPlayer( );
    std::string SomeOneJustLeft( );
    std::string FeatureBlocked( );
    std::string OwnerForLobbyControl( std::string trigger );
    std::string Publicity( std::string web, std::string groupid );
    std::string AdviseToStartGameWithOwnerRight( std::string trigger );
    std::string AdviseWhenLobbyFull( std::string trigger );
    std::string AtLeastXPlayersToStartGame( std::string num );
    std::string TeamImba( std::string trigger );
    std::string TotalLaggingTimeLimit( );
    std::string CommandDisabled( std::string command );
    std::string NoAdminKick( );
    std::string DoDFInstead( std::string trigger );
    std::string UnableToCommand( std::string trigger );
    std::string InvalidNickname( );
    std::string AutostartCanceled( );
    std::string KickMsgForLowDLRate( std::string name, std::string dlrate, std::string dlratequota );
    std::string StartDisabledButVSAndTOEnabled( std::string trigger );
    std::string StartDisabledButVSEnabled( std::string trigger );
    std::string StartDisabledButTOEnabled( std::string trigger );
    std::string StartDisabled( std::string trigger );
    std::string AutoBanEnabled( std::string ban, std::string timer );
    std::string FFResignAndWin( std::string loser, std::string winner );
    std::string FFOath( std::string user );
    std::string FFCounter( std::string team );
    std::string PlayerMutedForBeingFloodMouthed( std::string name, std::string time );
    std::string RemovedPlayerFromTheAutoMuteList( std::string name );
    std::string BotChannel( std::string channel );
    std::string GameOwner( std::string owner );
    std::string GameName( std::string gamename );
    std::string GameMode( std::string HCL );
    std::string PlayersNotYetPingedRus( std::string number, std::string notpinged );
    std::string GameIsStarted( std::string description );
    std::string WaitingForPlayersBeforeAutoStart( std::string players, std::string playersleft );
    std::string AutoCreatingPrivateGame( std::string gamename );
    std::string AutoCreatingPublicGame( std::string gamename );
    std::string GameOwners( std::string owners );
    std::string GameHost( std::string host );
    std::string AddedUserToAdminDatabase2( std::string server, std::string user );
    std::string AddedUserToAdminDatabase3( std::string server, std::string user, std::string date );
    std::string AddedUserToAdminDatabase4( std::string server, std::string user, std::string date );
    std::string AddedUserToAdminDatabase5( std::string server, std::string user, std::string date );
    std::string AddedUserToAdminDatabase6( std::string server, std::string user, std::string date );
    std::string KickMsgForSlowDL( std::string name );
    std::string KickMsgForLongDL( std::string name, std::string dltime, std::string dltimequota );
    std::string BotName( std::string name );
    std::string CMCGWinners( );
    std::string CMCGWinnersNotYet( );
    std::string CMCGClearWinners( std::string map );
    std::string CMCGSetWinner( std::string map, std::string winner );
    std::string CMCGSetWinners( std::string map, std::string winners );
    std::string CMCGCongratsWinners( std::string map, std::string winners );
    std::string CMCGAdmins( std::string admins );
    std::string CMCGAdminsNotYet( );
    std::string CMCGAwards( );
    std::string CMCGSchedule( );
    std::string CMCGTimeUntilStart( std::string time );
    std::string CMCGTimeFromStart( std::string time );
    std::string CMCGBeginRightNow( );
    std::string CMCGStartRightNow( );
    std::string CMCGMaps( std::string maps );
    std::string CMCGMapsNotYet( );
    std::string CMCGNextMap( std::string map, std::string admin );
    std::string CMCGNextMap( std::string map );
    std::string CMCGCurrentMap( std::string map );
    std::string CMCGLastMap( std::string map );
    std::string CMCGAllMap( std::string maps );
    std::string CMCGSetMaps( std::string maps );
    std::string CMCGIncorrectAddMap( std::string trigger, std::string command );
    std::string CMCGIncorrectCodeMap( std::string code );
    std::string CMCGFollowToAdmin( std::string admin, std::string gamename );
    std::string CMCGFollowToAdmin( std::string admin );
    std::string CMCGFollowToAdmin(  );
    std::string CMCGSetMapsHelp( std::string trigger, std::string command );
    std::string CMCGClearMapsHelp( std::string trigger, std::string command );
    std::string CMCGClearMaps( );
    std::string CMCGSetAdminsHelp( std::string trigger, std::string command );
    std::string CMCGClearAdminsHelp( std::string trigger, std::string command );
    std::string CMCGClearAdmins( );
    std::string CMCGSetAdmins( std::string admins );
    std::string CMCGFindOutRules( std::string trigger, std::string command );
    std::string CountryFullName( std::string code, uint32_t casename = 0 );
};

#endif
